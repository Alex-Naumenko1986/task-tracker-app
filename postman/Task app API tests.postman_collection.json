{
  "info": {
    "_postman_id": "c8dd90a5-3e8e-48b6-8b76-cc241a38548a",
    "name": "Task app API tests",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "28912486"
  },
  "item": [
    {
      "name": "Регистрация 1-го пользователя",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Поле id должно присутствовать и быть числом\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id).is.an('number');\r",
              "});\r",
              "pm.test(\"Поле email должно иметь значение naumenko@yandex.ru\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('email');\r",
              "    pm.expect(jsonData.email).is.an('string');\r",
              "    pm.expect(jsonData.email).to.eql('naumenko@yandex.ru');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"email\": \"naumenko@yandex.ru\",\r\n    \"password\": \"123456\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/register",
          "host": [
            "{{url}}"
          ],
          "path": [
            "register"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Неверный email при регистрации",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(400);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"email\": \"testmail@\",\r\n    \"password\": \"123456\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/register",
          "host": [
            "{{url}}"
          ],
          "path": [
            "register"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Отсутствует email при регистрации",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(400);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"password\": \"123456\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/register",
          "host": [
            "{{url}}"
          ],
          "path": [
            "register"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Отсутствует пароль при регистрации",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(400);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"email\": \"test@mail.ru\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/register",
          "host": [
            "{{url}}"
          ],
          "path": [
            "register"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Короткий пароль при регистрации",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(400);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"email\": \"test@mail.ru\",\r\n    \"password\": \"12345\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/register",
          "host": [
            "{{url}}"
          ],
          "path": [
            "register"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Неверный пароль при аутентификации",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 401 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(401);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"email\": \"naumenko@yandex.ru\",\r\n    \"password\": \"1234567\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/login",
          "host": [
            "{{url}}"
          ],
          "path": [
            "login"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Аутентификация 1-го пользователя",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Поле jwtToken должно присутствовать и быть строкой\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('jwtToken');\r",
              "    pm.expect(jsonData.jwtToken).is.an('string');\r",
              "});\r",
              "\r",
              "var jsonData = pm.response.json();\r",
              "pm.collectionVariables.set(\"jwtToken\", jsonData.jwtToken);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"email\": \"naumenko@yandex.ru\",\r\n    \"password\": \"123456\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/login",
          "host": [
            "{{url}}"
          ],
          "path": [
            "login"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Создание задачи с пустым title",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(400);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"title\": \"\",\r\n    \"description\": \"Купить цветы в магазине\",\r\n    \"status\": \"WAITING\",\r\n    \"priority\": \"HIGH\",\r\n     \"performerEmail\": \"naumenko@yandex.ru\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/tasks",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Создание задачи без приоритета",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(400);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"title\": \"\",\r\n    \"description\": \"Купить цветы в магазине\",\r\n    \"status\": \"WAITING\",\r\n    \"performerEmail\": \"naumenko@yandex.ru\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/tasks",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks"
          ]
        }
      },
      "response": []
    },
    {
      "name": "1-ый пользователь создает 1-ую задачу",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Поле taskId должно присутствовать и быть строкой\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('taskId');\r",
              "    pm.expect(jsonData.taskId).is.string\r",
              "});\r",
              "\r",
              "pm.test(\"Поле title должно присутствовать и содержать текст 'Купить цветы'\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('title');\r",
              "    pm.expect(jsonData.title).is.equal('Купить цветы');\r",
              "});\r",
              "\r",
              "pm.test(\"Поле description должно присутствовать и содержать текст 'Купить цветы в магазине'\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('description');\r",
              "    pm.expect(jsonData.description).is.equal('Купить цветы в магазине');\r",
              "});\r",
              "\r",
              "pm.test(\"Поле status должно присутствовать и быть равно 'WAITING'\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('status');\r",
              "    pm.expect(jsonData.status).is.equal('WAITING');\r",
              "});\r",
              "\r",
              "pm.test(\"Поле priority должно присутствовать и быть равно 'HIGH'\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('priority');\r",
              "    pm.expect(jsonData.priority).is.equal('HIGH');\r",
              "});\r",
              "\r",
              "pm.test(\"Поле performer должно присутствовать и содержать email 'naumenko@yandex.ru'\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('performer');\r",
              "    pm.expect(jsonData.performer.email).is.equal('naumenko@yandex.ru');\r",
              "});\r",
              "\r",
              "pm.test(\"Поле author должно присутствовать и содержать email 'naumenko@yandex.ru'\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('author');\r",
              "    pm.expect(jsonData.author.email).is.equal('naumenko@yandex.ru');\r",
              "});\r",
              "\r",
              "var jsonData = pm.response.json();\r",
              "pm.collectionVariables.set(\"task1Id\", jsonData.taskId)"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"title\": \"Купить цветы\",\r\n    \"description\": \"Купить цветы в магазине\",\r\n    \"status\": \"WAITING\",\r\n    \"priority\": \"HIGH\",\r\n     \"performerEmail\": \"naumenko@yandex.ru\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/tasks",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks"
          ]
        }
      },
      "response": []
    },
    {
      "name": "1-ый пользователь создает 2-ую задачу без исполнителя",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Поле performer должно присутствовать и содержать null\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('performer');\r",
              "    pm.expect(jsonData.performer).is.null;\r",
              "});\r",
              "\r",
              "var jsonData = pm.response.json();\r",
              "pm.collectionVariables.set(\"task2Id\", jsonData.taskId)\r",
              "\r",
              "\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"title\": \"Сделать тестовое\",\r\n    \"description\": \"Сделать тестовое к дедлайну\",\r\n    \"status\": \"IN_PROGRESS\",\r\n    \"priority\": \"HIGH\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/tasks",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks"
          ]
        }
      },
      "response": []
    },
    {
      "name": "1-ый пользователь обновляет 1-ую задачу",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Поле taskId должно присутствовать и быть строкой\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('taskId');\r",
              "    pm.expect(jsonData.taskId).is.string\r",
              "});\r",
              "\r",
              "pm.test(\"Поле title должно присутствовать и содержать текст 'Купить цветы'\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('title');\r",
              "    pm.expect(jsonData.title).is.equal('Купить цветы');\r",
              "});\r",
              "\r",
              "pm.test(\"Поле description должно присутствовать и содержать текст 'Купить цветы на Рижском рынке'\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('description');\r",
              "    pm.expect(jsonData.description).is.equal('Купить цветы на Рижском рынке');\r",
              "});\r",
              "\r",
              "pm.test(\"Поле status должно присутствовать и быть равно 'WAITING'\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('status');\r",
              "    pm.expect(jsonData.status).is.equal('WAITING');\r",
              "});\r",
              "\r",
              "pm.test(\"Поле priority должно присутствовать и быть равно 'LOW'\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('priority');\r",
              "    pm.expect(jsonData.priority).is.equal('LOW');\r",
              "});\r",
              "\r",
              "pm.test(\"Поле performer должно присутствовать и содержать email 'naumenko@yandex.ru'\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('performer');\r",
              "    pm.expect(jsonData.performer.email).is.equal('naumenko@yandex.ru');\r",
              "});\r",
              "\r",
              "pm.test(\"Поле author должно присутствовать и содержать email 'naumenko@yandex.ru'\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('author');\r",
              "    pm.expect(jsonData.author.email).is.equal('naumenko@yandex.ru');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"description\": \"Купить цветы на Рижском рынке\",\r\n    \"priority\": \"LOW\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/tasks/{{task1Id}}",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks",
            "{{task1Id}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Попытка назначить незарегистрированного исполнителя",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"performerEmail\": \"test@yandex.ru\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/tasks/{{task2Id}}",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks",
            "{{task2Id}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "1-ый пользователь назначает исполнителя 2-ой задачи",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Поле performer должно присутствовать и содержать email 'naumenko@yandex.ru'\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('performer');\r",
              "    pm.expect(jsonData.performer.email).is.equal('naumenko@yandex.ru');\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"performerEmail\": \"naumenko@yandex.ru\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/tasks/{{task2Id}}",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks",
            "{{task2Id}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Регистрация 2-го пользователя",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Поле id должно присутствовать и быть числом\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('id');\r",
              "    pm.expect(jsonData.id).is.an('number');\r",
              "});\r",
              "pm.test(\"Поле email должно иметь значение test@yandex.ru\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('email');\r",
              "    pm.expect(jsonData.email).is.an('string');\r",
              "    pm.expect(jsonData.email).to.eql('test@yandex.ru');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"email\": \"test@yandex.ru\",\r\n    \"password\": \"123456\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/register",
          "host": [
            "{{url}}"
          ],
          "path": [
            "register"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Аутентификация 2-го пользователя",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "var jsonData = pm.response.json();\r",
              "pm.collectionVariables.set(\"jwtToken\", jsonData.jwtToken);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"email\": \"test@yandex.ru\",\r\n    \"password\": \"123456\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/login",
          "host": [
            "{{url}}"
          ],
          "path": [
            "login"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Пользователь обновляет задачу, которую не создавал",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"description\": \"Изучить очереди сообщений\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/tasks/{{task1Id}}",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks",
            "{{task1Id}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение 1-ой задачи по ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Поле taskId должно присутствовать и быть строкой\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('taskId');\r",
              "    pm.expect(jsonData.taskId).is.string\r",
              "});\r",
              "\r",
              "pm.test(\"Поле title должно присутствовать и содержать текст 'Купить цветы'\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('title');\r",
              "    pm.expect(jsonData.title).is.equal('Купить цветы');\r",
              "});\r",
              "\r",
              "pm.test(\"Поле description должно присутствовать и содержать текст 'Купить цветы на Рижском рынке'\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('description');\r",
              "    pm.expect(jsonData.description).is.equal('Купить цветы на Рижском рынке');\r",
              "});\r",
              "\r",
              "pm.test(\"Поле status должно присутствовать и быть равно 'WAITING'\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('status');\r",
              "    pm.expect(jsonData.status).is.equal('WAITING');\r",
              "});\r",
              "\r",
              "pm.test(\"Поле priority должно присутствовать и быть равно 'LOW'\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('priority');\r",
              "    pm.expect(jsonData.priority).is.equal('LOW');\r",
              "});\r",
              "\r",
              "pm.test(\"Поле performer должно присутствовать и содержать email 'naumenko@yandex.ru'\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('performer');\r",
              "    pm.expect(jsonData.performer.email).is.equal('naumenko@yandex.ru');\r",
              "});\r",
              "\r",
              "pm.test(\"Поле author должно присутствовать и содержать email 'naumenko@yandex.ru'\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('author');\r",
              "    pm.expect(jsonData.author.email).is.equal('naumenko@yandex.ru');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{url}}/tasks/{{task1Id}}",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks",
            "{{task1Id}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение задачи по неверному ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{url}}/tasks/b926ce0a-ce59",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks",
            "b926ce0a-ce59"
          ]
        }
      },
      "response": []
    },
    {
      "name": "2-ой пользователь создает 3-ю задачу",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "var jsonData = pm.response.json();\r",
              "pm.collectionVariables.set(\"task3Id\", jsonData.taskId)\r",
              "\r",
              "\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"title\": \"Сходить на прогулку\",\r\n    \"description\": \"Сходить на прогулку в парк\",\r\n    \"status\": \"WAITING\",\r\n    \"priority\": \"MEDIUM\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/tasks",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Аутентификация 1-го пользователя",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Поле jwtToken должно присутствовать и быть строкой\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('jwtToken');\r",
              "    pm.expect(jsonData.jwtToken).is.an('string');\r",
              "});\r",
              "\r",
              "var jsonData = pm.response.json();\r",
              "pm.collectionVariables.set(\"jwtToken\", jsonData.jwtToken);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"email\": \"naumenko@yandex.ru\",\r\n    \"password\": \"123456\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/login",
          "host": [
            "{{url}}"
          ],
          "path": [
            "login"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение собственных задач 1-м пользователем",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Ответ должен быть массивом и содержать 2 элемента\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).is.an('array');\r",
              "    pm.expect(jsonData.length).to.eql(2);\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{url}}/tasks/my",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks",
            "my"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение задач других пользователей 1-м пользователем",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Ответ должен быть массивом и содержать 1 элемент\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).is.an('array');\r",
              "    pm.expect(jsonData.length).to.eql(1);\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{url}}/tasks/others",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks",
            "others"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Пользователь пытается удалить задачу, которую не создавал",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{url}}/tasks/{{task3Id}}",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks",
            "{{task3Id}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление задачи по несуществующему ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{url}}/tasks/16946332-5c2f-4206",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks",
            "16946332-5c2f-4206"
          ]
        }
      },
      "response": []
    },
    {
      "name": "1-ый пользователь удаляет 1-ую задачу",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "   });"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{url}}/tasks/{{task1Id}}",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks",
            "{{task1Id}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Обновление статуса задачи пользователем, который не является автором или исполнителем",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(400);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"status\": \"COMPLETED\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/tasks/{{task3Id}}/status",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks",
            "{{task3Id}}",
            "status"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Обновление статуса задачи по неверному ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"status\": \"COMPLETED\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/tasks/16946332-5c2f-4206/status",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks",
            "16946332-5c2f-4206",
            "status"
          ]
        }
      },
      "response": []
    },
    {
      "name": "1-ый пользователь обновляет статус 2-ой задачи",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Поле status должно присутствовать и быть равно 'COMPLETED'\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).to.have.property('status');\r",
              "    pm.expect(jsonData.status).is.equal('COMPLETED');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"status\": \"COMPLETED\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/tasks/{{task2Id}}/status",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks",
            "{{task2Id}}",
            "status"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария к задаче по неверному ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"text\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/tasks/afdsfdf-0233-3434fdfs/comments",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks",
            "afdsfdf-0233-3434fdfs",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария к задаче с пустым полем text",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(400);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/tasks/{{task2Id}}/comments",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks",
            "{{task2Id}}",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "1-ый пользователь добавляет 1-ый комментарий к 3-ей задаче",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Fixed the TypeError by correcting the property used for checking the length of the array\r",
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Поле comments должно быть массивом и содержать 1 элемент\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.comments).is.an('array');\r",
              "    pm.expect(jsonData.comments.length).to.eql(1); \r",
              "});\r",
              "\r",
              "pm.test(\"Первый элемент массива comments должен содержать верные значения полей\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.comments[0]).to.have.property('commentId');\r",
              "    pm.expect(jsonData.comments[0].commentId).to.be.string;\r",
              "    pm.expect(jsonData.comments[0]).to.have.property('text');\r",
              "    pm.expect(jsonData.comments[0].text).is.equal('Это отличная идея');\r",
              "    pm.expect(jsonData.comments[0]).to.have.property('author');\r",
              "    pm.expect(jsonData.comments[0].author.id).is.an('number');\r",
              "    pm.expect(jsonData.comments[0].author.email).is.equal('naumenko@yandex.ru');\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Это отличная идея\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/tasks/{{task3Id}}/comments",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks",
            "{{task3Id}}",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "1-ый пользователь добавляет 2-ой комментарий к 3-ей задаче",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Поле comments должно быть массивом и содержать 2 элемента\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.comments).is.an('array');\r",
              "    pm.expect(jsonData.comments.length).to.eql(2); \r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Погода сегодня хорошая\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/tasks/{{task3Id}}/comments",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks",
            "{{task3Id}}",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Проверка отображения комментариев при получении задачи по ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Поле comments должно быть массивом и содержать 2 элемента\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData.comments).is.an('array');\r",
              "    pm.expect(jsonData.comments.length).to.eql(2); \r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{url}}/tasks/{{task3Id}}",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks",
            "{{task3Id}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "1-ый пользователь назначает исполнителем 2-ой задачи 2-го пользователя",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"performerEmail\": \"test@yandex.ru\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{url}}/tasks/{{task2Id}}",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks",
            "{{task2Id}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Попытка фильтрации задач по несуществующему автору",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{url}}/tasks?author=unexisted@yandex.ru",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks"
          ],
          "query": [
            {
              "key": "author",
              "value": "unexisted@yandex.ru"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Попытка фильтрации задач по несуществующему автору Copy",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(404);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{url}}/tasks?author=unexisted@yandex.ru",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks"
          ],
          "query": [
            {
              "key": "author",
              "value": "unexisted@yandex.ru"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Проверка фильтрации задач по автору",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Ответ должен быть массивом и содержать 1 элемент\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).is.an('array');\r",
              "    pm.expect(jsonData.length).to.eql(1); \r",
              "});\r",
              "\r",
              "pm.test(\"Проверка идентификатора полученной задачи\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0].taskId).is.string;\r",
              "    pm.expect(jsonData[0].taskId).to.eql(pm.collectionVariables.get('task3Id')); \r",
              "});\r",
              "\r",
              "pm.test(\"Поле comments должно быть массивом и содержать 2 элемента\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0].comments).is.an('array');\r",
              "    pm.expect(jsonData[0].comments.length).to.eql(2); \r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{url}}/tasks?author=test@yandex.ru",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks"
          ],
          "query": [
            {
              "key": "author",
              "value": "test@yandex.ru"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Проверка фильтрации задач по исполнителю",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "pm.test(\"Ответ должен быть массивом и содержать 1 элемент\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData).is.an('array');\r",
              "    pm.expect(jsonData.length).to.eql(1); \r",
              "});\r",
              "\r",
              "pm.test(\"Проверка идентификатора полученной задачи\", function () {\r",
              "    var jsonData = pm.response.json();\r",
              "    pm.expect(jsonData[0].taskId).is.string;\r",
              "    pm.expect(jsonData[0].taskId).to.eql(pm.collectionVariables.get('task2Id')); \r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{url}}/tasks?performer=test@yandex.ru",
          "host": [
            "{{url}}"
          ],
          "path": [
            "tasks"
          ],
          "query": [
            {
              "key": "performer",
              "value": "test@yandex.ru"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwtToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "url",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "jwtToken",
      "value": "0",
      "type": "string"
    },
    {
      "key": "task1Id",
      "value": "0",
      "type": "string"
    },
    {
      "key": "task2Id",
      "value": "0",
      "type": "string"
    },
    {
      "key": "task3Id",
      "value": "0",
      "type": "string"
    }
  ]
}